(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
var Init = /*#__PURE__*/function () {
  function Init(functions) {
    _classCallCheck(this, Init);
    this.core = {};
    this.functions = functions;
    this.events = {};
    if (document.readyState !== 'loading' && document.body) {
      this.init();
    } else if (document.readyState === 'loading') {
      document.addEventListener('readystatechange', this.readyHandler.bind(this), false);
    } else {
      document.addEventListener('DOMContentLoaded', this.init.bind(this));
    }
  }
  _createClass(Init, [{
    key: "readyHandler",
    value: function readyHandler() {
      if (document.readyState !== 'interactive') {
        return;
      }
      this.init();
    }
  }, {
    key: "init",
    value: function init() {
      var operations = Object.keys(this.functions);
      for (var i = 0, l = operations.length; i < l; i++) {
        var operation = operations[i];
        var clean = Init.tidy(operation, true);
        this.events[clean] = Init.tidy(operation);
        this.bindEvents(this.events[clean], operation);
      }
      window.functionCore = this.core;
    }
  }, {
    key: "bindEvents",
    value: function bindEvents(events, operation) {
      var _this = this;
      var clean = Init.tidy(operation, true);
      try {
        this.core[clean] = this.functions[operation]();
        var _loop = function _loop(i, l) {
          if (events[i] !== 'scroll' && events[i] !== 'resize') {
            return "continue";
          }
          if (typeof _this.core[clean][events[i]] === 'undefined') {
            Init.presentError(operation, new Error("Missing this.".concat(events[i], " function")));
            return "continue";
          }
          window.addEventListener(events[i], function (e) {
            if (window.requestAnimationFrame) {
              window.requestAnimationFrame(_this.core[clean][events[i]]);
            } else {
              try {
                _this.core[clean][events[i]](e);
              } catch (error) {
                Init.presentError(operation, error);
              }
            }
          });
        };
        for (var i = 0, l = events.length; i < l; i++) {
          var _ret = _loop(i, l);
          if (_ret === "continue") continue;
        }
      } catch (error) {
        Init.presentError(operation, error);
      }
    }
  }], [{
    key: "tidy",
    value: function tidy(operation, task) {
      var result = operation.split('__');
      if (task === true) {
        result = result[0];
      } else {
        result.shift();
      }
      return result;
    }
  }, {
    key: "presentError",
    value: function presentError(operation, error) {
      if (typeof console === 'undefined') {
        return;
      }
      if (console.groupCollapsed) {
        console.groupCollapsed("%c [".concat(operation, " error] - ").concat(error.message, ". Expand for details:"), 'color: #ff5a5a');
        console.log(error.stack);
        console.groupEnd();
      } else {
        console.log(error.stack);
      }
    }
  }]);
  return Init;
}();
var _default = Init;
exports["default"] = _default;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
var Year = /*#__PURE__*/function () {
  function Year() {
    _classCallCheck(this, Year);
    this.yearelem = document.querySelector('.getyear');
    this.currentyear = new Date().getFullYear();
  }
  _createClass(Year, [{
    key: "init",
    value: function init() {
      this.yearelem.innerHTML = this.currentyear;
    }
  }]);
  return Year;
}();
var _default = Year;
exports["default"] = _default;

},{}],3:[function(require,module,exports){
"use strict";

var _currentyear = _interopRequireDefault(require("./classes/currentyear.js"));
var _Init = _interopRequireDefault(require("./classes/Init"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var siteFunctions = {
  documentReady__ready: function documentReady__ready() {},
  getyear__ready: function getyear__ready() {
    var year = new _currentyear["default"]();
    year.init();
  }
};
window.functionCore = new _Init["default"](siteFunctions);

},{"./classes/Init":1,"./classes/currentyear.js":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
